// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mhconfig/proto/mhconfig.proto

#include "mhconfig/proto/mhconfig.pb.h"
#include "mhconfig/proto/mhconfig.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mhconfig {
namespace proto {

static const char* MHConfig_method_names[] = {
  "/mhconfig.proto.MHConfig/Get",
  "/mhconfig.proto.MHConfig/Update",
  "/mhconfig.proto.MHConfig/RunGC",
};

std::unique_ptr< MHConfig::Stub> MHConfig::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MHConfig::Stub> stub(new MHConfig::Stub(channel));
  return stub;
}

MHConfig::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(MHConfig_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(MHConfig_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunGC_(MHConfig_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MHConfig::Stub::Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::mhconfig::proto::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void MHConfig::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void MHConfig::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void MHConfig::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void MHConfig::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>* MHConfig::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mhconfig::proto::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>* MHConfig::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mhconfig::proto::GetResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status MHConfig::Stub::Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::mhconfig::proto::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void MHConfig::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void MHConfig::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void MHConfig::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

void MHConfig::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>* MHConfig::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mhconfig::proto::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>* MHConfig::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mhconfig::proto::UpdateResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::Status MHConfig::Stub::RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::mhconfig::proto::RunGCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunGC_, context, request, response);
}

void MHConfig::Stub::experimental_async::RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunGC_, context, request, response, std::move(f));
}

void MHConfig::Stub::experimental_async::RunGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::RunGCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunGC_, context, request, response, std::move(f));
}

void MHConfig::Stub::experimental_async::RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RunGC_, context, request, response, reactor);
}

void MHConfig::Stub::experimental_async::RunGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::RunGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RunGC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>* MHConfig::Stub::AsyncRunGCRaw(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mhconfig::proto::RunGCResponse>::Create(channel_.get(), cq, rpcmethod_RunGC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>* MHConfig::Stub::PrepareAsyncRunGCRaw(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mhconfig::proto::RunGCResponse>::Create(channel_.get(), cq, rpcmethod_RunGC_, context, request, false);
}

MHConfig::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MHConfig_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MHConfig::Service, ::mhconfig::proto::GetRequest, ::mhconfig::proto::GetResponse>(
          std::mem_fn(&MHConfig::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MHConfig_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MHConfig::Service, ::mhconfig::proto::UpdateRequest, ::mhconfig::proto::UpdateResponse>(
          std::mem_fn(&MHConfig::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MHConfig_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MHConfig::Service, ::mhconfig::proto::RunGCRequest, ::mhconfig::proto::RunGCResponse>(
          std::mem_fn(&MHConfig::Service::RunGC), this)));
}

MHConfig::Service::~Service() {
}

::grpc::Status MHConfig::Service::Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MHConfig::Service::Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MHConfig::Service::RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mhconfig
}  // namespace proto

