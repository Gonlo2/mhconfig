// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mhconfig/proto/mhconfig.proto
#ifndef GRPC_mhconfig_2fproto_2fmhconfig_2eproto__INCLUDED
#define GRPC_mhconfig_2fproto_2fmhconfig_2eproto__INCLUDED

#include "mhconfig/proto/mhconfig.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace mhconfig {
namespace proto {

class MHConfig final {
 public:
  static constexpr char const* service_full_name() {
    return "mhconfig.proto.MHConfig";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::mhconfig::proto::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::mhconfig::proto::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::mhconfig::proto::RunGCResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::RunGCResponse>> AsyncRunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::RunGCResponse>>(AsyncRunGCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::RunGCResponse>> PrepareAsyncRunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::RunGCResponse>>(PrepareAsyncRunGCRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::RunGCResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RunGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::RunGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::RunGCResponse>* AsyncRunGCRaw(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mhconfig::proto::RunGCResponse>* PrepareAsyncRunGCRaw(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::mhconfig::proto::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::mhconfig::proto::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::mhconfig::proto::RunGCResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>> AsyncRunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>>(AsyncRunGCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>> PrepareAsyncRunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>>(PrepareAsyncRunGCRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::UpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response, std::function<void(::grpc::Status)>) override;
      void RunGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::RunGCResponse* response, std::function<void(::grpc::Status)>) override;
      void RunGC(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RunGC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mhconfig::proto::RunGCResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::mhconfig::proto::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::mhconfig::proto::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>* AsyncRunGCRaw(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mhconfig::proto::RunGCResponse>* PrepareAsyncRunGCRaw(::grpc::ClientContext* context, const ::mhconfig::proto::RunGCRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_RunGC_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response);
    virtual ::grpc::Status RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::mhconfig::proto::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::mhconfig::proto::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::mhconfig::proto::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mhconfig::proto::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunGC() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RunGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunGC(::grpc::ServerContext* context, ::mhconfig::proto::RunGCRequest* request, ::grpc::ServerAsyncResponseWriter< ::mhconfig::proto::RunGCResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_Update<WithAsyncMethod_RunGC<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::mhconfig::proto::GetRequest, ::mhconfig::proto::GetResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mhconfig::proto::GetRequest* request,
                 ::mhconfig::proto::GetResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Get(
        ::grpc::experimental::MessageAllocator< ::mhconfig::proto::GetRequest, ::mhconfig::proto::GetResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mhconfig::proto::GetRequest, ::mhconfig::proto::GetResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::mhconfig::proto::UpdateRequest, ::mhconfig::proto::UpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mhconfig::proto::UpdateRequest* request,
                 ::mhconfig::proto::UpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Update(
        ::grpc::experimental::MessageAllocator< ::mhconfig::proto::UpdateRequest, ::mhconfig::proto::UpdateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mhconfig::proto::UpdateRequest, ::mhconfig::proto::UpdateResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RunGC() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::mhconfig::proto::RunGCRequest, ::mhconfig::proto::RunGCResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mhconfig::proto::RunGCRequest* request,
                 ::mhconfig::proto::RunGCResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RunGC(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RunGC(
        ::grpc::experimental::MessageAllocator< ::mhconfig::proto::RunGCRequest, ::mhconfig::proto::RunGCResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mhconfig::proto::RunGCRequest, ::mhconfig::proto::RunGCResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RunGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_RunGC<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunGC() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RunGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RunGC() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RunGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunGC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RunGC() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RunGC(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RunGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RunGC(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mhconfig::proto::GetRequest, ::mhconfig::proto::GetResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::mhconfig::proto::GetRequest* request, ::mhconfig::proto::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mhconfig::proto::GetRequest,::mhconfig::proto::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mhconfig::proto::UpdateRequest, ::mhconfig::proto::UpdateResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::mhconfig::proto::UpdateRequest* request, ::mhconfig::proto::UpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mhconfig::proto::UpdateRequest,::mhconfig::proto::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RunGC() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mhconfig::proto::RunGCRequest, ::mhconfig::proto::RunGCResponse>(std::bind(&WithStreamedUnaryMethod_RunGC<BaseClass>::StreamedRunGC, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RunGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunGC(::grpc::ServerContext* context, const ::mhconfig::proto::RunGCRequest* request, ::mhconfig::proto::RunGCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunGC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mhconfig::proto::RunGCRequest,::mhconfig::proto::RunGCResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_RunGC<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_RunGC<Service > > > StreamedService;
};

}  // namespace proto
}  // namespace mhconfig


#endif  // GRPC_mhconfig_2fproto_2fmhconfig_2eproto__INCLUDED
