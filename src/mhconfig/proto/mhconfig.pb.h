// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mhconfig/proto/mhconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mhconfig_2fproto_2fmhconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mhconfig_2fproto_2fmhconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mhconfig_2fproto_2fmhconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mhconfig_2fproto_2fmhconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto;
namespace mhconfig {
namespace proto {
class Element;
class ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class RunGCRequest;
class RunGCRequestDefaultTypeInternal;
extern RunGCRequestDefaultTypeInternal _RunGCRequest_default_instance_;
class RunGCResponse;
class RunGCResponseDefaultTypeInternal;
extern RunGCResponseDefaultTypeInternal _RunGCResponse_default_instance_;
class UpdateRequest;
class UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
class UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
}  // namespace proto
}  // namespace mhconfig
PROTOBUF_NAMESPACE_OPEN
template<> ::mhconfig::proto::Element* Arena::CreateMaybeMessage<::mhconfig::proto::Element>(Arena*);
template<> ::mhconfig::proto::GetRequest* Arena::CreateMaybeMessage<::mhconfig::proto::GetRequest>(Arena*);
template<> ::mhconfig::proto::GetResponse* Arena::CreateMaybeMessage<::mhconfig::proto::GetResponse>(Arena*);
template<> ::mhconfig::proto::RunGCRequest* Arena::CreateMaybeMessage<::mhconfig::proto::RunGCRequest>(Arena*);
template<> ::mhconfig::proto::RunGCResponse* Arena::CreateMaybeMessage<::mhconfig::proto::RunGCResponse>(Arena*);
template<> ::mhconfig::proto::UpdateRequest* Arena::CreateMaybeMessage<::mhconfig::proto::UpdateRequest>(Arena*);
template<> ::mhconfig::proto::UpdateResponse* Arena::CreateMaybeMessage<::mhconfig::proto::UpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mhconfig {
namespace proto {

enum UpdateResponse_Status : int {
  UpdateResponse_Status_OK = 0,
  UpdateResponse_Status_ERROR = 1,
  UpdateResponse_Status_UpdateResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdateResponse_Status_UpdateResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdateResponse_Status_IsValid(int value);
constexpr UpdateResponse_Status UpdateResponse_Status_Status_MIN = UpdateResponse_Status_OK;
constexpr UpdateResponse_Status UpdateResponse_Status_Status_MAX = UpdateResponse_Status_ERROR;
constexpr int UpdateResponse_Status_Status_ARRAYSIZE = UpdateResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateResponse_Status_descriptor();
template<typename T>
inline const std::string& UpdateResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateResponse_Status_descriptor(), enum_t_value);
}
inline bool UpdateResponse_Status_Parse(
    const std::string& name, UpdateResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateResponse_Status>(
    UpdateResponse_Status_descriptor(), name, value);
}
enum RunGCRequest_Type : int {
  RunGCRequest_Type_CACHE_GENERATION_0 = 0,
  RunGCRequest_Type_CACHE_GENERATION_1 = 1,
  RunGCRequest_Type_CACHE_GENERATION_2 = 2,
  RunGCRequest_Type_DEAD_POINTERS = 3,
  RunGCRequest_Type_NAMESPACES = 4,
  RunGCRequest_Type_VERSIONS = 5,
  RunGCRequest_Type_RunGCRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RunGCRequest_Type_RunGCRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RunGCRequest_Type_IsValid(int value);
constexpr RunGCRequest_Type RunGCRequest_Type_Type_MIN = RunGCRequest_Type_CACHE_GENERATION_0;
constexpr RunGCRequest_Type RunGCRequest_Type_Type_MAX = RunGCRequest_Type_VERSIONS;
constexpr int RunGCRequest_Type_Type_ARRAYSIZE = RunGCRequest_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunGCRequest_Type_descriptor();
template<typename T>
inline const std::string& RunGCRequest_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RunGCRequest_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RunGCRequest_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RunGCRequest_Type_descriptor(), enum_t_value);
}
inline bool RunGCRequest_Type_Parse(
    const std::string& name, RunGCRequest_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RunGCRequest_Type>(
    RunGCRequest_Type_descriptor(), name, value);
}
enum Element_NodeType : int {
  Element_NodeType_SCALAR_NODE = 0,
  Element_NodeType_MAP_NODE = 1,
  Element_NodeType_SEQUENCE_NODE = 2,
  Element_NodeType_NULL_NODE = 3,
  Element_NodeType_UNDEFINED_NODE = 4,
  Element_NodeType_Element_NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Element_NodeType_Element_NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Element_NodeType_IsValid(int value);
constexpr Element_NodeType Element_NodeType_NodeType_MIN = Element_NodeType_SCALAR_NODE;
constexpr Element_NodeType Element_NodeType_NodeType_MAX = Element_NodeType_UNDEFINED_NODE;
constexpr int Element_NodeType_NodeType_ARRAYSIZE = Element_NodeType_NodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Element_NodeType_descriptor();
template<typename T>
inline const std::string& Element_NodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Element_NodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Element_NodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Element_NodeType_descriptor(), enum_t_value);
}
inline bool Element_NodeType_Parse(
    const std::string& name, Element_NodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Element_NodeType>(
    Element_NodeType_descriptor(), name, value);
}
// ===================================================================

class GetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mhconfig.proto.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mhconfig.proto.GetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto);
    return ::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string overrides = 2;
  int overrides_size() const;
  void clear_overrides();
  static const int kOverridesFieldNumber = 2;
  const std::string& overrides(int index) const;
  std::string* mutable_overrides(int index);
  void set_overrides(int index, const std::string& value);
  void set_overrides(int index, std::string&& value);
  void set_overrides(int index, const char* value);
  void set_overrides(int index, const char* value, size_t size);
  std::string* add_overrides();
  void add_overrides(const std::string& value);
  void add_overrides(std::string&& value);
  void add_overrides(const char* value);
  void add_overrides(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& overrides() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_overrides();

  // repeated string key = 4;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  const std::string& key(int index) const;
  std::string* mutable_key(int index);
  void set_key(int index, const std::string& value);
  void set_key(int index, std::string&& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  std::string* add_key();
  void add_key(const std::string& value);
  void add_key(std::string&& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key();

  // string root_path = 1;
  void clear_root_path();
  static const int kRootPathFieldNumber = 1;
  const std::string& root_path() const;
  void set_root_path(const std::string& value);
  void set_root_path(std::string&& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  std::string* mutable_root_path();
  std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);

  // uint32 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mhconfig.proto.GetRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> overrides_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mhconfig_2fproto_2fmhconfig_2eproto;
};
// -------------------------------------------------------------------

class GetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mhconfig.proto.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(nullptr);
  }

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mhconfig.proto.GetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto);
    return ::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mhconfig.proto.Element elements = 3;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 3;
  ::mhconfig::proto::Element* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mhconfig::proto::Element >*
      mutable_elements();
  const ::mhconfig::proto::Element& elements(int index) const;
  ::mhconfig::proto::Element* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mhconfig::proto::Element >&
      elements() const;

  // uint64 namespace_id = 1;
  void clear_namespace_id();
  static const int kNamespaceIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 namespace_id() const;
  void set_namespace_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mhconfig.proto.GetResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mhconfig::proto::Element > elements_;
  ::PROTOBUF_NAMESPACE_ID::uint64 namespace_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mhconfig_2fproto_2fmhconfig_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mhconfig.proto.UpdateRequest) */ {
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UpdateRequest* other);
  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const final {
    return CreateMaybeMessage<UpdateRequest>(nullptr);
  }

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mhconfig.proto.UpdateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto);
    return ::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string relative_paths = 2;
  int relative_paths_size() const;
  void clear_relative_paths();
  static const int kRelativePathsFieldNumber = 2;
  const std::string& relative_paths(int index) const;
  std::string* mutable_relative_paths(int index);
  void set_relative_paths(int index, const std::string& value);
  void set_relative_paths(int index, std::string&& value);
  void set_relative_paths(int index, const char* value);
  void set_relative_paths(int index, const char* value, size_t size);
  std::string* add_relative_paths();
  void add_relative_paths(const std::string& value);
  void add_relative_paths(std::string&& value);
  void add_relative_paths(const char* value);
  void add_relative_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relative_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relative_paths();

  // string root_path = 1;
  void clear_root_path();
  static const int kRootPathFieldNumber = 1;
  const std::string& root_path() const;
  void set_root_path(const std::string& value);
  void set_root_path(std::string&& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  std::string* mutable_root_path();
  std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);

  // @@protoc_insertion_point(class_scope:mhconfig.proto.UpdateRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relative_paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mhconfig_2fproto_2fmhconfig_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mhconfig.proto.UpdateResponse) */ {
 public:
  UpdateResponse();
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UpdateResponse* other);
  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const final {
    return CreateMaybeMessage<UpdateResponse>(nullptr);
  }

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mhconfig.proto.UpdateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto);
    return ::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdateResponse_Status Status;
  static constexpr Status OK =
    UpdateResponse_Status_OK;
  static constexpr Status ERROR =
    UpdateResponse_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return UpdateResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UpdateResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UpdateResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UpdateResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UpdateResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UpdateResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return UpdateResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint64 namespace_id = 1;
  void clear_namespace_id();
  static const int kNamespaceIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 namespace_id() const;
  void set_namespace_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .mhconfig.proto.UpdateResponse.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::mhconfig::proto::UpdateResponse_Status status() const;
  void set_status(::mhconfig::proto::UpdateResponse_Status value);

  // uint32 version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mhconfig.proto.UpdateResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 namespace_id_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mhconfig_2fproto_2fmhconfig_2eproto;
};
// -------------------------------------------------------------------

class RunGCRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mhconfig.proto.RunGCRequest) */ {
 public:
  RunGCRequest();
  virtual ~RunGCRequest();

  RunGCRequest(const RunGCRequest& from);
  RunGCRequest(RunGCRequest&& from) noexcept
    : RunGCRequest() {
    *this = ::std::move(from);
  }

  inline RunGCRequest& operator=(const RunGCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunGCRequest& operator=(RunGCRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunGCRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunGCRequest* internal_default_instance() {
    return reinterpret_cast<const RunGCRequest*>(
               &_RunGCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RunGCRequest* other);
  friend void swap(RunGCRequest& a, RunGCRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunGCRequest* New() const final {
    return CreateMaybeMessage<RunGCRequest>(nullptr);
  }

  RunGCRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunGCRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunGCRequest& from);
  void MergeFrom(const RunGCRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunGCRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mhconfig.proto.RunGCRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto);
    return ::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RunGCRequest_Type Type;
  static constexpr Type CACHE_GENERATION_0 =
    RunGCRequest_Type_CACHE_GENERATION_0;
  static constexpr Type CACHE_GENERATION_1 =
    RunGCRequest_Type_CACHE_GENERATION_1;
  static constexpr Type CACHE_GENERATION_2 =
    RunGCRequest_Type_CACHE_GENERATION_2;
  static constexpr Type DEAD_POINTERS =
    RunGCRequest_Type_DEAD_POINTERS;
  static constexpr Type NAMESPACES =
    RunGCRequest_Type_NAMESPACES;
  static constexpr Type VERSIONS =
    RunGCRequest_Type_VERSIONS;
  static inline bool Type_IsValid(int value) {
    return RunGCRequest_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RunGCRequest_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RunGCRequest_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RunGCRequest_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RunGCRequest_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RunGCRequest_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return RunGCRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .mhconfig.proto.RunGCRequest.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mhconfig::proto::RunGCRequest_Type type() const;
  void set_type(::mhconfig::proto::RunGCRequest_Type value);

  // uint32 max_live_in_seconds = 2;
  void clear_max_live_in_seconds();
  static const int kMaxLiveInSecondsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_live_in_seconds() const;
  void set_max_live_in_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mhconfig.proto.RunGCRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_live_in_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mhconfig_2fproto_2fmhconfig_2eproto;
};
// -------------------------------------------------------------------

class RunGCResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mhconfig.proto.RunGCResponse) */ {
 public:
  RunGCResponse();
  virtual ~RunGCResponse();

  RunGCResponse(const RunGCResponse& from);
  RunGCResponse(RunGCResponse&& from) noexcept
    : RunGCResponse() {
    *this = ::std::move(from);
  }

  inline RunGCResponse& operator=(const RunGCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunGCResponse& operator=(RunGCResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunGCResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunGCResponse* internal_default_instance() {
    return reinterpret_cast<const RunGCResponse*>(
               &_RunGCResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RunGCResponse* other);
  friend void swap(RunGCResponse& a, RunGCResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunGCResponse* New() const final {
    return CreateMaybeMessage<RunGCResponse>(nullptr);
  }

  RunGCResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunGCResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunGCResponse& from);
  void MergeFrom(const RunGCResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunGCResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mhconfig.proto.RunGCResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto);
    return ::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mhconfig.proto.RunGCResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mhconfig_2fproto_2fmhconfig_2eproto;
};
// -------------------------------------------------------------------

class Element :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mhconfig.proto.Element) */ {
 public:
  Element();
  virtual ~Element();

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Element& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Element* other);
  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Element* New() const final {
    return CreateMaybeMessage<Element>(nullptr);
  }

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Element& from);
  void MergeFrom(const Element& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mhconfig.proto.Element";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto);
    return ::descriptor_table_mhconfig_2fproto_2fmhconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Element_NodeType NodeType;
  static constexpr NodeType SCALAR_NODE =
    Element_NodeType_SCALAR_NODE;
  static constexpr NodeType MAP_NODE =
    Element_NodeType_MAP_NODE;
  static constexpr NodeType SEQUENCE_NODE =
    Element_NodeType_SEQUENCE_NODE;
  static constexpr NodeType NULL_NODE =
    Element_NodeType_NULL_NODE;
  static constexpr NodeType UNDEFINED_NODE =
    Element_NodeType_UNDEFINED_NODE;
  static inline bool NodeType_IsValid(int value) {
    return Element_NodeType_IsValid(value);
  }
  static constexpr NodeType NodeType_MIN =
    Element_NodeType_NodeType_MIN;
  static constexpr NodeType NodeType_MAX =
    Element_NodeType_NodeType_MAX;
  static constexpr int NodeType_ARRAYSIZE =
    Element_NodeType_NodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NodeType_descriptor() {
    return Element_NodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& NodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NodeType_Name.");
    return Element_NodeType_Name(enum_t_value);
  }
  static inline bool NodeType_Parse(const std::string& name,
      NodeType* value) {
    return Element_NodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string key = 4;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // .mhconfig.proto.Element.NodeType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::mhconfig::proto::Element_NodeType type() const;
  void set_type(::mhconfig::proto::Element_NodeType value);

  // uint32 sibling_offset = 2;
  void clear_sibling_offset();
  static const int kSiblingOffsetFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 sibling_offset() const;
  void set_sibling_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mhconfig.proto.Element)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sibling_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mhconfig_2fproto_2fmhconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRequest

// string root_path = 1;
inline void GetRequest::clear_root_path() {
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRequest::root_path() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.GetRequest.root_path)
  return root_path_.GetNoArena();
}
inline void GetRequest::set_root_path(const std::string& value) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetRequest.root_path)
}
inline void GetRequest::set_root_path(std::string&& value) {
  
  root_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mhconfig.proto.GetRequest.root_path)
}
inline void GetRequest::set_root_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mhconfig.proto.GetRequest.root_path)
}
inline void GetRequest::set_root_path(const char* value, size_t size) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mhconfig.proto.GetRequest.root_path)
}
inline std::string* GetRequest::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.GetRequest.root_path)
  return root_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRequest::release_root_path() {
  // @@protoc_insertion_point(field_release:mhconfig.proto.GetRequest.root_path)
  
  return root_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    
  } else {
    
  }
  root_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_path);
  // @@protoc_insertion_point(field_set_allocated:mhconfig.proto.GetRequest.root_path)
}

// repeated string overrides = 2;
inline int GetRequest::overrides_size() const {
  return overrides_.size();
}
inline void GetRequest::clear_overrides() {
  overrides_.Clear();
}
inline const std::string& GetRequest::overrides(int index) const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.GetRequest.overrides)
  return overrides_.Get(index);
}
inline std::string* GetRequest::mutable_overrides(int index) {
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.GetRequest.overrides)
  return overrides_.Mutable(index);
}
inline void GetRequest::set_overrides(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetRequest.overrides)
  overrides_.Mutable(index)->assign(value);
}
inline void GetRequest::set_overrides(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetRequest.overrides)
  overrides_.Mutable(index)->assign(std::move(value));
}
inline void GetRequest::set_overrides(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  overrides_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mhconfig.proto.GetRequest.overrides)
}
inline void GetRequest::set_overrides(int index, const char* value, size_t size) {
  overrides_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mhconfig.proto.GetRequest.overrides)
}
inline std::string* GetRequest::add_overrides() {
  // @@protoc_insertion_point(field_add_mutable:mhconfig.proto.GetRequest.overrides)
  return overrides_.Add();
}
inline void GetRequest::add_overrides(const std::string& value) {
  overrides_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mhconfig.proto.GetRequest.overrides)
}
inline void GetRequest::add_overrides(std::string&& value) {
  overrides_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mhconfig.proto.GetRequest.overrides)
}
inline void GetRequest::add_overrides(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  overrides_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mhconfig.proto.GetRequest.overrides)
}
inline void GetRequest::add_overrides(const char* value, size_t size) {
  overrides_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mhconfig.proto.GetRequest.overrides)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRequest::overrides() const {
  // @@protoc_insertion_point(field_list:mhconfig.proto.GetRequest.overrides)
  return overrides_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRequest::mutable_overrides() {
  // @@protoc_insertion_point(field_mutable_list:mhconfig.proto.GetRequest.overrides)
  return &overrides_;
}

// uint32 version = 3;
inline void GetRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRequest::version() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.GetRequest.version)
  return version_;
}
inline void GetRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetRequest.version)
}

// repeated string key = 4;
inline int GetRequest::key_size() const {
  return key_.size();
}
inline void GetRequest::clear_key() {
  key_.Clear();
}
inline const std::string& GetRequest::key(int index) const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.GetRequest.key)
  return key_.Get(index);
}
inline std::string* GetRequest::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.GetRequest.key)
  return key_.Mutable(index);
}
inline void GetRequest::set_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetRequest.key)
  key_.Mutable(index)->assign(value);
}
inline void GetRequest::set_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetRequest.key)
  key_.Mutable(index)->assign(std::move(value));
}
inline void GetRequest::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mhconfig.proto.GetRequest.key)
}
inline void GetRequest::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mhconfig.proto.GetRequest.key)
}
inline std::string* GetRequest::add_key() {
  // @@protoc_insertion_point(field_add_mutable:mhconfig.proto.GetRequest.key)
  return key_.Add();
}
inline void GetRequest::add_key(const std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mhconfig.proto.GetRequest.key)
}
inline void GetRequest::add_key(std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mhconfig.proto.GetRequest.key)
}
inline void GetRequest::add_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mhconfig.proto.GetRequest.key)
}
inline void GetRequest::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mhconfig.proto.GetRequest.key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRequest::key() const {
  // @@protoc_insertion_point(field_list:mhconfig.proto.GetRequest.key)
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:mhconfig.proto.GetRequest.key)
  return &key_;
}

// -------------------------------------------------------------------

// GetResponse

// uint64 namespace_id = 1;
inline void GetResponse::clear_namespace_id() {
  namespace_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetResponse::namespace_id() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.GetResponse.namespace_id)
  return namespace_id_;
}
inline void GetResponse::set_namespace_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  namespace_id_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetResponse.namespace_id)
}

// uint32 version = 2;
inline void GetResponse::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetResponse::version() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.GetResponse.version)
  return version_;
}
inline void GetResponse::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.GetResponse.version)
}

// repeated .mhconfig.proto.Element elements = 3;
inline int GetResponse::elements_size() const {
  return elements_.size();
}
inline void GetResponse::clear_elements() {
  elements_.Clear();
}
inline ::mhconfig::proto::Element* GetResponse::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.GetResponse.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mhconfig::proto::Element >*
GetResponse::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:mhconfig.proto.GetResponse.elements)
  return &elements_;
}
inline const ::mhconfig::proto::Element& GetResponse::elements(int index) const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.GetResponse.elements)
  return elements_.Get(index);
}
inline ::mhconfig::proto::Element* GetResponse::add_elements() {
  // @@protoc_insertion_point(field_add:mhconfig.proto.GetResponse.elements)
  return elements_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mhconfig::proto::Element >&
GetResponse::elements() const {
  // @@protoc_insertion_point(field_list:mhconfig.proto.GetResponse.elements)
  return elements_;
}

// -------------------------------------------------------------------

// UpdateRequest

// string root_path = 1;
inline void UpdateRequest::clear_root_path() {
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateRequest::root_path() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.UpdateRequest.root_path)
  return root_path_.GetNoArena();
}
inline void UpdateRequest::set_root_path(const std::string& value) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mhconfig.proto.UpdateRequest.root_path)
}
inline void UpdateRequest::set_root_path(std::string&& value) {
  
  root_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mhconfig.proto.UpdateRequest.root_path)
}
inline void UpdateRequest::set_root_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mhconfig.proto.UpdateRequest.root_path)
}
inline void UpdateRequest::set_root_path(const char* value, size_t size) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mhconfig.proto.UpdateRequest.root_path)
}
inline std::string* UpdateRequest::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.UpdateRequest.root_path)
  return root_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateRequest::release_root_path() {
  // @@protoc_insertion_point(field_release:mhconfig.proto.UpdateRequest.root_path)
  
  return root_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    
  } else {
    
  }
  root_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_path);
  // @@protoc_insertion_point(field_set_allocated:mhconfig.proto.UpdateRequest.root_path)
}

// repeated string relative_paths = 2;
inline int UpdateRequest::relative_paths_size() const {
  return relative_paths_.size();
}
inline void UpdateRequest::clear_relative_paths() {
  relative_paths_.Clear();
}
inline const std::string& UpdateRequest::relative_paths(int index) const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.UpdateRequest.relative_paths)
  return relative_paths_.Get(index);
}
inline std::string* UpdateRequest::mutable_relative_paths(int index) {
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.UpdateRequest.relative_paths)
  return relative_paths_.Mutable(index);
}
inline void UpdateRequest::set_relative_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mhconfig.proto.UpdateRequest.relative_paths)
  relative_paths_.Mutable(index)->assign(value);
}
inline void UpdateRequest::set_relative_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mhconfig.proto.UpdateRequest.relative_paths)
  relative_paths_.Mutable(index)->assign(std::move(value));
}
inline void UpdateRequest::set_relative_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  relative_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mhconfig.proto.UpdateRequest.relative_paths)
}
inline void UpdateRequest::set_relative_paths(int index, const char* value, size_t size) {
  relative_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mhconfig.proto.UpdateRequest.relative_paths)
}
inline std::string* UpdateRequest::add_relative_paths() {
  // @@protoc_insertion_point(field_add_mutable:mhconfig.proto.UpdateRequest.relative_paths)
  return relative_paths_.Add();
}
inline void UpdateRequest::add_relative_paths(const std::string& value) {
  relative_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mhconfig.proto.UpdateRequest.relative_paths)
}
inline void UpdateRequest::add_relative_paths(std::string&& value) {
  relative_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mhconfig.proto.UpdateRequest.relative_paths)
}
inline void UpdateRequest::add_relative_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  relative_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mhconfig.proto.UpdateRequest.relative_paths)
}
inline void UpdateRequest::add_relative_paths(const char* value, size_t size) {
  relative_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mhconfig.proto.UpdateRequest.relative_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateRequest::relative_paths() const {
  // @@protoc_insertion_point(field_list:mhconfig.proto.UpdateRequest.relative_paths)
  return relative_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateRequest::mutable_relative_paths() {
  // @@protoc_insertion_point(field_mutable_list:mhconfig.proto.UpdateRequest.relative_paths)
  return &relative_paths_;
}

// -------------------------------------------------------------------

// UpdateResponse

// uint64 namespace_id = 1;
inline void UpdateResponse::clear_namespace_id() {
  namespace_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateResponse::namespace_id() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.UpdateResponse.namespace_id)
  return namespace_id_;
}
inline void UpdateResponse::set_namespace_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  namespace_id_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.UpdateResponse.namespace_id)
}

// .mhconfig.proto.UpdateResponse.Status status = 2;
inline void UpdateResponse::clear_status() {
  status_ = 0;
}
inline ::mhconfig::proto::UpdateResponse_Status UpdateResponse::status() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.UpdateResponse.status)
  return static_cast< ::mhconfig::proto::UpdateResponse_Status >(status_);
}
inline void UpdateResponse::set_status(::mhconfig::proto::UpdateResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.UpdateResponse.status)
}

// uint32 version = 3;
inline void UpdateResponse::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateResponse::version() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.UpdateResponse.version)
  return version_;
}
inline void UpdateResponse::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.UpdateResponse.version)
}

// -------------------------------------------------------------------

// RunGCRequest

// .mhconfig.proto.RunGCRequest.Type type = 1;
inline void RunGCRequest::clear_type() {
  type_ = 0;
}
inline ::mhconfig::proto::RunGCRequest_Type RunGCRequest::type() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.RunGCRequest.type)
  return static_cast< ::mhconfig::proto::RunGCRequest_Type >(type_);
}
inline void RunGCRequest::set_type(::mhconfig::proto::RunGCRequest_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.RunGCRequest.type)
}

// uint32 max_live_in_seconds = 2;
inline void RunGCRequest::clear_max_live_in_seconds() {
  max_live_in_seconds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RunGCRequest::max_live_in_seconds() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.RunGCRequest.max_live_in_seconds)
  return max_live_in_seconds_;
}
inline void RunGCRequest::set_max_live_in_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_live_in_seconds_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.RunGCRequest.max_live_in_seconds)
}

// -------------------------------------------------------------------

// RunGCResponse

// -------------------------------------------------------------------

// Element

// .mhconfig.proto.Element.NodeType type = 1;
inline void Element::clear_type() {
  type_ = 0;
}
inline ::mhconfig::proto::Element_NodeType Element::type() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.Element.type)
  return static_cast< ::mhconfig::proto::Element_NodeType >(type_);
}
inline void Element::set_type(::mhconfig::proto::Element_NodeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.Element.type)
}

// uint32 sibling_offset = 2;
inline void Element::clear_sibling_offset() {
  sibling_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Element::sibling_offset() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.Element.sibling_offset)
  return sibling_offset_;
}
inline void Element::set_sibling_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sibling_offset_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.Element.sibling_offset)
}

// uint32 size = 3;
inline void Element::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Element::size() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.Element.size)
  return size_;
}
inline void Element::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:mhconfig.proto.Element.size)
}

// string key = 4;
inline void Element::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Element::key() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.Element.key)
  return key_.GetNoArena();
}
inline void Element::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mhconfig.proto.Element.key)
}
inline void Element::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mhconfig.proto.Element.key)
}
inline void Element::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mhconfig.proto.Element.key)
}
inline void Element::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mhconfig.proto.Element.key)
}
inline std::string* Element::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.Element.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Element::release_key() {
  // @@protoc_insertion_point(field_release:mhconfig.proto.Element.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Element::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mhconfig.proto.Element.key)
}

// string value = 5;
inline void Element::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Element::value() const {
  // @@protoc_insertion_point(field_get:mhconfig.proto.Element.value)
  return value_.GetNoArena();
}
inline void Element::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mhconfig.proto.Element.value)
}
inline void Element::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mhconfig.proto.Element.value)
}
inline void Element::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mhconfig.proto.Element.value)
}
inline void Element::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mhconfig.proto.Element.value)
}
inline std::string* Element::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:mhconfig.proto.Element.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Element::release_value() {
  // @@protoc_insertion_point(field_release:mhconfig.proto.Element.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Element::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mhconfig.proto.Element.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mhconfig

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mhconfig::proto::UpdateResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mhconfig::proto::UpdateResponse_Status>() {
  return ::mhconfig::proto::UpdateResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::mhconfig::proto::RunGCRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mhconfig::proto::RunGCRequest_Type>() {
  return ::mhconfig::proto::RunGCRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::mhconfig::proto::Element_NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mhconfig::proto::Element_NodeType>() {
  return ::mhconfig::proto::Element_NodeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mhconfig_2fproto_2fmhconfig_2eproto
